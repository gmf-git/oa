# Generated by Django 2.2.6 on 2020-12-18 06:25

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insert_time', models.DateTimeField(auto_now_add=True, verbose_name='插入时间')),
                ('method', models.CharField(blank=True, max_length=20, null=True, verbose_name='请求方法')),
                ('url', models.CharField(blank=True, max_length=255, null=True, verbose_name='请求路由')),
                ('params', models.CharField(blank=True, max_length=255, null=True, verbose_name='参数')),
                ('is_delete', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': '权限表',
                'db_table': 'system_permission',
            },
        ),
        migrations.CreateModel(
            name='RoleModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insert_time', models.DateTimeField(auto_now_add=True, verbose_name='插入时间')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='角色名称')),
                ('info', models.TextField(blank=True, null=True, verbose_name='角色描述')),
                ('key', models.IntegerField(blank=True, null=True, verbose_name='唯一标识')),
                ('is_delete', models.BooleanField(default=False, verbose_name='逻辑删除')),
                ('permissions', models.ManyToManyField(blank=True, null=True, related_name='role', to='system.Permission', verbose_name='权限')),
            ],
            options={
                'verbose_name': '角色表',
                'db_table': 'system_role',
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='真实姓名')),
                ('is_delete', models.BooleanField(default=False, verbose_name='逻辑删除')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('roles', models.ManyToManyField(blank=True, null=True, related_name='user', to='system.RoleModel', verbose_name='角色')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户表',
                'db_table': 'system_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
